#!/usr/bin/env python

import logging
import sys

from enum import Enum
from datetime import date
from datetime import datetime

import click

import redminelib

from dateutil.relativedelta import relativedelta



class Lifecycle(str, Enum):
    #active = 'active'
    stale = 'stale'
    rotten = 'rotten'
    frozen = 'frozen'


class LifecycleNotes(str, Enum):
    stale = '''Issues go stale after 90d of inactivity.
Mark the issue as fresh by clearing the '{lifecycle_field_name}' field.
Stale issues rot after an additional 30d of inactivity and eventually close.

If this issue is safe to close please do so now.
'''

    rotten = '''Stale issues rot after 30d of inactivity.
Mark the issue as fresh by clearing the '{lifecycle_field_name}' field.
Rotten issues close after an additional 30d of inactivity.

If this issue is safe to close please do so now.
'''

    close = '''Rotten issues close after 30d of inactivity.
Reopen the issue if needed.
Mark the issue as fresh by clearing the '{lifecycle_field_name}' field.
'''



@click.command(name='redmine-lifecycle-bot')
@click.option('--verbose', '-v', is_flag=True, help='be more verbose')
@click.option('--debug', '-d', is_flag=True, help='be even more verbose')
@click.option('--log-level', 'log_level', help='set log level')
@click.option('--dry-run', '-n', is_flag=True, help='only log changes instead of applying them')
@click.option('--url', required=True, help='url of the redmine API', envvar='REDMINE_URL')
@click.option('--api-key', required=True, help='remine api key', envvar='REDMINE_API_KEY')
@click.option('--lifecycle-field-id', type=int, required=True, envvar='LIFECYCLE_FIELD_ID',
    help='the redmine custom field id used for storing lifecycle state')
@click.option('--enable-lifecycle-field', is_flag=True, help='enable the lifecycle field on all managemend projects, even in dry-run mode.')
@click.option('--rotten-status-id', type=int, default=5, envvar='ROTTEN_STATUS_ID',
    help='the redmine status ID to use when closing rotten issues. Defaults to: 5')
@click.option('--stale-after', type=int, default=90, envvar='STALE_AFTER',
    help='after how many days of inactivity issues go stale')
@click.option('--reconcile-after', type=int, default=30, envvar='RECONCILE_AFTER',
    help='after how many days of inactivity lifecycle state is reconciled')
@click.option('--issue-id', type=int, help='only run on the given specific issue')
@click.option('--force', is_flag=True, help='process issues independent of inactivity')
@click.pass_context
def main(ctx, verbose, debug, log_level, dry_run,
        url, api_key, lifecycle_field_id, enable_lifecycle_field,
        rotten_status_id,
        stale_after, reconcile_after, issue_id, force):
    """Redmine issue lifecycle bot based on ideas from fejta-bot.
    """

    # configure logger
    logging.basicConfig(level=logging.ERROR, format='%(asctime)s %(levelname)s: %(message)s', stream=sys.stderr)
    log = logging.getLogger(ctx.info_name)
    if not log_level:
        if verbose:
            log_level = 'info'
        elif debug:
            log_level = 'debug'
            # Warning: uncommenting this will leak the api key in the logs!
            ## set debug log level on root logger instance -> valid for ALL loggers
            #logging.getLogger().setLevel(getattr(logging, log_level.upper()))

    if log_level:
        log.setLevel(getattr(logging, log_level.upper()))

    # Warning: uncommenting this will leak the api key in the logs!
    #log.debug('ctx.args: {0}'.format(ctx.args))
    #log.debug('ctx.params: {0}'.format(ctx.params))

    if force:
        stale_after = 0
        reconcile_after = 0

    date_ref = date.today()
    stale_threshold = date_ref - relativedelta(days=stale_after)
    inactivity_threshold = date_ref - relativedelta(days=reconcile_after)

    try:
        #redmine = redminelib.Redmine(url, key=api_key, requests={'verify': False},
        redmine = redminelib.Redmine(url, key=api_key, datetime_format='%Y-%m-%dT%H:%M:%S')
        user = redmine.user.get('current', include=['memberships'])
        open_project_ids = [project['id'] for project in redmine.project.all()]
        member_project_ids = [membership['project']['id'] for membership in user.memberships.values()]
        project_ids = list(set(member_project_ids).intersection(set(open_project_ids)))
        log.debug(f'user: {user!r}')
        log.debug(f'project_ids: {project_ids}')
    except redminelib.exceptions.AuthError as e:
        ctx.fail('Failed to authenticate to redmine with the given API key.')

    try:
        lifecycle_field = redmine.custom_field.get(lifecycle_field_id)
        log.debug(f'lifecycle_field: {lifecycle_field!r}')
    except redminelib.exceptions.ResourceNotFoundError as e:
        ctx.fail(f'Failed to get the lifecycle field for the given field id: {lifecycle_field_id}')


    # Ensure the 'lifecycle' custom field is enabled for the projects we are responsible for.
    for project_id in project_ids:
        try:
            project = redmine.project.get(project_id, include=['issue_custom_fields'])
            log.debug(f'project: {project!r}')
        except redminelib.exceptions.ResourceNotFoundError as e:
            log.warning(f'The redmine project id does not exist: {project_id}')
            continue

        try:
            issue_custom_field_ids = [f['id'] for f in project.issue_custom_fields]
            if not lifecycle_field.id in issue_custom_field_ids:
                log.info(f'enable lifecycle field on: {project!r}')
                if not dry_run or enable_lifecycle_field:
                    issue_custom_field_ids.append(lifecycle_field.id)
                    log.debug(f'setting custom_fields for project {project_id} to {issue_custom_field_ids}')
                    redmine.project.update(project_id, issue_custom_field_ids=issue_custom_field_ids)
        except redminelib.exceptions.ResourceNotFoundError as e:
            log.warning(f'Failed to enable the lifecycle custom field ({lifecycle_field_id}) for project: {project_id}')
            continue

    # For all projects we are a member of.
    for project_id in project_ids:
        # Note: The redmine api by default only returns open issue,
        #       so do not have to filter on that ourself.
        query = {
           'project_id': project_id,
            f'cf_{lifecycle_field_id}': f'!{Lifecycle.frozen}',
            'updated_on': f'<={inactivity_threshold}',
        }
        if issue_id:
            query['issue_id'] = issue_id

        log.debug(f'query: {query}')

        # For every queried issue that is not frozen.
        try:
            for issue in redmine.issue.filter(**query):
                lifecycle = issue.custom_fields.get(lifecycle_field_id)
                if not lifecycle:
                    log.warning(f'lifecycle field missing on: {issue!r}')
                    continue
                try:
                    current_lifecycle = lifecycle.value
                except redminelib.exceptions.ResourceAttrError as e:
                    # The issue has not been saved since the lifecycle field
                    # was enabled on the project.
                    current_lifecycle = ''
                updates = {}
                if current_lifecycle == Lifecycle.rotten:
                    # Issue has been rotten for more then 30 days.
                    # Close it.
                    log.info(f'close: {issue!r}')
                    updates['status_id'] = rotten_status_id
                    updates['notes'] = LifecycleNotes.close.format(lifecycle_field_name=lifecycle_field.name)
                else:
                    if current_lifecycle == Lifecycle.stale:
                        # Issue has been stale for more then 30 days.
                        # Mark it as rotten.
                        lifecycle.value = Lifecycle.rotten
                        log.info(f'mark {lifecycle.value}: {issue!r}')
                        updates['custom_fields'] = [dict(lifecycle)]
                        updates['notes'] = LifecycleNotes.rotten.format(lifecycle_field_name=lifecycle_field.name)
                    else:
                        updated_on_datetime = datetime.strptime(issue.updated_on, '%Y-%m-%dT%H:%M:%SZ')
                        if updated_on_datetime.date() <= stale_threshold:
                            # Issue has not been updated since more then 90 days.
                            # Mark it as stale.
                            lifecycle.value = Lifecycle.stale
                            log.info(f'mark {lifecycle.value}: {issue!r}')
                            updates['custom_fields'] = [dict(lifecycle)]
                            updates['notes'] = LifecycleNotes.stale.format(lifecycle_field_name=lifecycle_field.name)

                if updates:
                    log.debug(f'{issue!r} updates: {updates}')
                if updates and not dry_run:
                    try:
                        redmine.issue.update(issue.id, **updates)
                    except redminelib.exceptions.BaseRedmineError as e:
                        log.exception(f'Failed to update issue: {issue.id}')
                        continue
        except Exception as e:
            log.exception(str(e))
            ctx.fail('Unknown error.')


if __name__ == '__main__':
    main()
